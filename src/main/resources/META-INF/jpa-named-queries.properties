
# ==================>> EmployeeRepository <<========================
List.findByDepartmentId = SELECT * FROM employees WHERE department_id = :departmentId





# ==================>> AssignmentRepository <<========================
Optional.findByCompositeIds = SELECT * FROM assignments WHERE employee_id = :employeeId AND project_id = :projectId AND commit_date = :commitDate
List.findByEmployeeId = SELECT DISTINCT p.project_id AS projectId, p.title AS title, p.start_date AS startDate, NVL(p.end_date, 'NOT_EXIST') AS endDate, p.status AS status FROM employees e INNER JOIN assignments a ON e.employee_id = a.employee_id INNER JOIN projects p ON a.project_id = p.project_id WHERE a.employee_id = :employeeId						
List.findByProjectId = SELECT DISTINCT e.first_name AS firstName, e.last_name AS lastName, a.project_id AS projectId, a.commit_date AS commitDate, NVL(a.commit_emp_desc, 'NOT_EXIST') AS commitEmpDesc, NVL(a.commit_mgr_desc, 'NOT_EXIST') AS commitMgrDesc FROM assignments a INNER JOIN employees e ON a.employee_id = e.employee_id WHERE a.project_id = :projectId ORDER BY a.commit_date DESC											
List.findByEmployeeIdAndProjectId = SELECT DISTINCT e.first_name AS firstName, e.last_name AS lastName, a.project_id AS projectId, a.commit_date AS commitDate, NVL(a.commit_emp_desc, 'NOT_EXIST') AS commitEmpDesc, NVL(a.commit_mgr_desc, 'NOT_EXIST') AS commitMgrDesc FROM assignments a INNER JOIN employees e ON a.employee_id = e.employee_id WHERE a.employee_id = :employeeId AND a.project_id = :projectId ORDER BY a.commit_date DESC											





# ==================>> UserCredentialRepository <<========================
Optional.findByUsername = SELECT * FROM user_credentials WHERE LOWER(username) = :username 


# ==================>> ProjectRepository <<========================
List.getProjectStatus = SELECT status AS label, COUNT(*) AS value FROM projects GROUP BY status


